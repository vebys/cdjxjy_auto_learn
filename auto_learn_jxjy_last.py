# Generated by Selenium IDE
import time
from selenium import webdriver
from selenium.webdriver.common.by import By

import ddddocr


class TestTest2():
    def setup_method(self, method):
        self.driver = webdriver.Firefox()
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    def wait_for_window(self, timeout=2):
        time.sleep(round(timeout / 1000))
        wh_now = self.driver.window_handles
        wh_then = self.vars["window_handles"]
        if len(wh_now) > len(wh_then):
            return set(wh_now).difference(set(wh_then)).pop()

    def test_test2(self):
        try:
            with open('./jxjy.txt', 'r') as f:
                info = f.readlines()
                # print(info)
                username = info[0].replace('\n', '')
                password = info[1]
        except Exception as e:
            print('读取配置文件登录信息失败请输入')
            username = input('请输入用户名，并按回车:')
            password = input('请输入密码，并按回车:')
        ocr = ddddocr.DdddOcr()
        self.driver.get("https://www.cdjxjy.com/SiteWeb/index.htm")
        self.driver.set_window_size(1936, 1048)
        self.driver.find_element(By.CSS_SELECTOR, ".top_bn01 > span").click()
        self.driver.find_element(By.ID, "myusername").click()
        self.driver.find_element(By.ID, "myusername").send_keys(username)
        self.driver.find_element(By.ID, "mypassword").send_keys(password)
        # 保存验证码
        code_img = 'img/new_code.jgp'
        self.driver.find_element(By.XPATH, '//*[@id="Login_ValImg"]').screenshot(code_img)
        with open(code_img, 'rb') as f:
            image = f.read()
        res = ocr.classification(image)
        print('验证码：', res)
        self.driver.find_element(By.XPATH, '//*[@id="txtcode"]').clear()
        self.driver.find_element(By.XPATH, '//*[@id="txtcode"]').send_keys(res)
        time.sleep(20)
        try:
            self.driver.find_element(By.XPATH, '//*[@id="btnlogininput"]').click()
            # self.driver.find_element(By.ID,'btnlogininput').click()
        except:
            pass
        time.sleep(10)
        # return
        # self.driver.find_element(By.ID, "mypassword").click()
        # self.driver.find_element(By.ID, "mypassword").click()
        # self.driver.find_element(By.ID, "txtcode").click()
        # self.driver.find_element(By.ID, "txtcode").send_keys("4272")
        # self.driver.find_element(By.ID, "btnlogininput").click()
        self.driver.find_element(By.ID, "RegionPanel1_leftPanel_accordionMenu_ctl01_header_hd-textEl").click()
        print('1')
        for i in range(10):
            print(f'第{i}次学习')
            if i > 1 and i % 10 == 0:
                print('学习10次强制等待')
                time.sleep(60 * 60)

            self.driver.find_element(By.LINK_TEXT, "未完成课程").click()

            print('点击-未完成课程')
            self.driver.switch_to.frame(1)
            print('切换frame1')

            self.vars["window_handles"] = self.driver.window_handles
            print('获取window_handles')
            # time.sleep(2)
            # print(f'第{i}次学习')
            # print(4)
            time.sleep(5)
            self.driver.find_element(By.LINK_TEXT, "课程学习").click()
            print('点击 课程学习')
            # print(l)
            # self.driver.find_element(By.CLASS_NAME, "课程学习")

            # wait_learn = self.driver.find_element(By.ID,'UpdatePanel1')
            # print(wait_learn)

            # self.driver.switch_to.window(self.vars["win5929"])
            self.vars["win9032"] = self.wait_for_window(2000)
            self.vars["root"] = self.driver.current_window_handle
            self.driver.switch_to.window(self.vars["win9032"])
            try:
                assert self.driver.switch_to.alert.text == "你好，你还有其它课程正在学习或者有非正常关闭学习课程，继续学习将会停止其它课程学习！"
                self.driver.switch_to.alert.accept()
            except:
                pass
            # 获取已学习时长
            try:
                time_str = self.driver.find_element(By.ID, 'labstudenttime').text
                print(time_str)

                if '已学满' in time_str:
                    print('学习已完成，需要关闭')
                    try:
                        self.driver.close()
                    except:
                        pass
                    try:
                        self.driver.switch_to.window(self.vars["root"])
                    except:
                        pass
                    try:
                        time.sleep(1)
                        self.driver.refresh()
                    # self.driver.find_element(By.ID, "button-1051-btnInnerEl").click()
                    except:
                        pass
                    # 跳过当前学习，进入下一轮学校
                    continue
                else:
                    print('还需要继续学习')
                    wait_learn_time = int(time_str[-5:-3])
                    print('提取待学习时间：', wait_learn_time)
            except:
                print('获取已学习时间失败,默认学习时间设置为40分钟')
                wait_learn_time = 40
            # 点击播放
            try:
                self.driver.find_element(By.XPATH,
                                         '/html/body/form/div[3]/div[2]/div[1]/div[1]/div[2]/div/div[1]/div').click()
                print('点击播放成功')
            except:
                print('点击播放失败')
            # try:
            #     self.driver.find_element(By.CSS_SELECTOR, "outter").click()
            #     print('点击播放2')
            # except:
            #     print('点击播放失败2')
            # 检测验证码
            time.sleep(20)
            sum_wait_time = wait_learn_time * 60
            for_wait_time = 30
            for _ in range(int(sum_wait_time / for_wait_time) + 1):
                try:

                    try:
                        self.driver.switch_to.frame('验证码')
                        print('切换frame验证码成功')
                    except:
                        print('切换frame验证码失败')
                    self.driver.find_element(By.ID, 'checkCode')
                    try:
                        # code2 = self.driver.find_element(By.ID, 'checkCode').text

                        self.driver.find_element(By.ID, 'yz').clear()
                        if i % 2 == 0:
                            time.sleep(1)
                            code2 = self.driver.find_element(By.ID, 'checkCode').text

                            if code2 !='':
                                print('验证码为', code2)
                                self.driver.find_element(By.ID, 'yz').send_keys(code2)
                                time.sleep(2)
                                self.driver.find_element(By.XPATH, '/html/body/div[1]/div[2]/div/div[2]/button').click()
                            else:
                                print('验证码为空', code2)
                    except:
                        print('验证码提取失败')
                except:
                    print('未弹出验证码')

                # 处理继续学习提示
                try:
                    self.driver.switch_to.alert.accept()
                    print('点击继续学习提示成功')
                except Exception as e:
                    print('点击继续学习提失败:')
                time.sleep(for_wait_time)
            # self.vars["win59291"] = self.wait_for_window(2000)
            # self.driver.switch_to.window(self.vars["win59291"])

            # print(self.driver.find_element(By.LINK_TEXT, "xx_ben"))
            # self.vars["win225"] = self.wait_for_window(2000)
            # self.driver.switch_to.window(self.vars["win225"])
            # self.driver.find_element(By.CSS_SELECTOR, ".outter").click()

            print(f'第{i}次学习结束，即将关闭')
            try:
                self.driver.close()
                print('关闭子窗口成功')
            except:
                print('关闭子窗口失败')
            try:
                self.driver.switch_to.window(self.vars["root"])
                print('切换主窗口成功')
            except:
                print('切换主窗口失败')
            try:
                time.sleep(1)
                self.driver.refresh()
                print('刷新成功')
            # self.driver.find_element(By.ID, "button-1051-btnInnerEl").click()
            except:
                print('刷新失败')
            time.sleep(3)


if __name__ == "__main__":
    learn = TestTest2()
    learn.setup_method('')
    learn.test_test2()
